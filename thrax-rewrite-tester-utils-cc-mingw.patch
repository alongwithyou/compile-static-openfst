--- src/bin/rewrite-tester-utils.cc.orig        2018-03-14 20:56:56.910257320 +0000
+++ src/bin/rewrite-tester-utils.cc     2018-03-14 21:16:32.635724323 +0000
@@ -28,6 +28,10 @@
 using thrax::GetGeneratedSymbolTable;
 using thrax::GrmManagerSpec;

+#if defined __MINGW32__
+#undef far
+#endif
+
 DEFINE_string(far, "", "Path to the FAR.");
 DEFINE_string(rules, "", "Names of the rewrite rules.");
 DEFINE_string(input_mode, "byte", "Either \"byte\", \"utf8\", or the path to a "
@@ -147,12 +151,21 @@
   }

   output_symtab_ = nullptr;
+#ifdef __MINGW32__
+  if (FLAGS_output_mode == "byte") {
+    type_ = fst::BYTE;
+  } else if (FLAGS_output_mode == "utf8") {
+    type_ = fst::UTF8;
+  } else {
+    type_ = fst::SYMBOL;
+#else
   if (FLAGS_output_mode == "byte") {
     type_ = BYTE;
   } else if (FLAGS_output_mode == "utf8") {
     type_ = UTF8;
   } else {
     type_ = SYMBOL;
+#endif
     output_symtab_ = SymbolTable::ReadText(FLAGS_output_mode);
     CHECK(output_symtab_)
         ;  // NOLINT
@@ -167,6 +180,15 @@
   }
   string return_val = "";
   // Set symbols for the input, if appropriate
+#ifdef __MINGW32__
+  if (byte_symtab_ && type_ == fst::BYTE) {
+    input_fst.SetInputSymbols(byte_symtab_);
+    input_fst.SetOutputSymbols(byte_symtab_);
+  } else if (utf8_symtab_ && type_ == fst::UTF8) {
+    input_fst.SetInputSymbols(utf8_symtab_);
+    input_fst.SetOutputSymbols(utf8_symtab_);
+  } else if (input_symtab_ && type_ == fst::SYMBOL) {
+#else
   if (byte_symtab_ && type_ == BYTE) {
     input_fst.SetInputSymbols(byte_symtab_);
     input_fst.SetOutputSymbols(byte_symtab_);
@@ -174,6 +196,7 @@
     input_fst.SetInputSymbols(utf8_symtab_);
     input_fst.SetOutputSymbols(utf8_symtab_);
   } else if (input_symtab_ && type_ == SYMBOL) {
+#endif
     input_fst.SetInputSymbols(input_symtab_);
     input_fst.SetOutputSymbols(input_symtab_);
   }
